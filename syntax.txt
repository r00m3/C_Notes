
====================================================================================================

	Typedef.

====================================================================================================



	Making new type names for existing types.

typedef int antelope;                           // Make "antelope" an alias for "int".
antelope a = 10;                                // Type "antelope" is the same as type "int".
typedef int antelope, bagel, mushroom;          // These are all "int".



	Typedef in practice.

struct animal {
        char *name;
        int leg_count, speed;
};

typedef struct animal animal;
animal z;                               // Now you can init struct by alias name.

animal_struct z;			// For clarity you can add _struct.



	Typedef in struct signature.

typedef struct animal {
        char *name;
        int leg_count, speed;
} animal;                       // <-- new name.

struct animal y;                // This works.
animal z;                       // This also works because "animal" is an alias.



	Anonymous structs.

typedef struct {
        char *name;
        int leg_count, speed;
} animal;                               // <-- new name.



	Intptr.

typedef int *intptr;
int a = 10;
intptr x = &a;          // "intptr" is type "int*".

	It hides the fact that x is a pointer type because you don’t see a * in the declaration.
	It’s better to explicitly show that you’re declaring a pointer type 
	so that other devs can clearly see it
	and don’t mistake x for having a non-pointer type.



====================================================================================================

	Structs.

====================================================================================================



struct person {
        char *name; 
};

struct person Person = {.name = "Peter"};

void change_name(struct person *p, char *new_name) {

        p.name = new_name;      // This will not work. p is pointer to
                                // person struct. Not struct itself.

        (*p).name = new_name;   // Works, but is non-idiomatic.

        c->price = new_price;   // Arrow operator.
}



	Copying structs.

struct car a, b;
b = a;                  // Copy the struct.



	Comparing structs.

There’s only one safe way to do it: 
compare each field one at a time.

You might think you could use memcmp(), 
but that doesn’t handle the case of the possible padding bytes
that might be in there.



	Nested structs.

struct foo x = {.a.b.c = 12};     // Initialize nested struct.



struct cabin_information {
        int window_count;
        int o2level;
};

struct spaceship {
        char *manufacturer;
        struct cabin_information ci;
};

int main(void) {

struct spaceship s = {
        .manufacturer = "General Products",
        .ci.window_count = 8,                   // <-- NESTED INITIALIZER!
        .ci.o2level = 21
};

printf("%s: %d seats, %d%% oxygen\n",
        s.manufacturer, s.ci.window_count, s.ci.o2level);

}



	 More standard way.

struct spaceship s = {
        .manufacturer = "General Products",
        .ci = {
                .window_count = 8,
                .o2level = 21
        }
};



====================================================================================================

	Strings.

====================================================================================================



	String literals.

char *c = "String literal";	// Saved on program memory.
c[0] = 'A';			// UB. String literals are immutable.



	Strings as characters arrays.
	Saved on stack memory.

char s[14] = "Hello, world!";   // Can mutate.
char s[] = "Hello, world!";     // Same. Can mutate.



	Copying strings.

You can’t copy a string through the assignment operator (=). 
All that does is make a copy of the pointer
to the first character so you end up with two pointers to the same string.



====================================================================================================

        Arrays.
        a[b] == *(a + b)

====================================================================================================



        Arrays are just syntactic sugar in C -
        they’re actually all pointers and stuff deep down.
        "By index" isn't a thing in C.

a[i] is just *(a + i)
int i[] = {1, 2};
printf("\n%d\n", *(i+1));



        Pointing to first element of array.

p = &a[0];      // p points to the array.
p = a;          // p points to the array, but much nicer-looking!



        Thats how you can pass array to function.

void times2(int *a, int len)    // Passing first element pointer. 
void times3(int a[], int len)   // Passing as array notation.
void times4(int a[5], int len)  // Passing as array notation with predefined len.

void times2(int *a, int len) {

        for (int i = 0; i < len; i++) {
                printf("%d\n", a[i] * 2);
        }
}
        First one is by far the most used.



        Can't measure array size properly.

You can't actually get size of array in C. 
C doesnt store this info.
You have to manage it separately in another variable.

        You CAN hack this around a bit:
int x[12];                                      // 12 ints.
printf("%zu\n", sizeof x);                      // 48 total bytes.
printf("%zu\n", sizeof(int));                   // 4 bytes per int.
printf("%zu\n", sizeof x / sizeof(int));        // 48/4 = 12 ints!

        But this trick only works in the scope 
        in which the array was defined. 
        If you pass the array to a function, it doesn’t work. 

void foo(int x[12]) {

        printf("%zu\n", sizeof x);                      // 8?! What happened to 48?
        printf("%zu\n", sizeof(int));                   // 4 bytes per int.
        printf("%zu\n", sizeof x / sizeof(int));        // 8/4 = 2 ints?? WRONG.
}

        This is because when you “pass” arrays to functions, 
        you’re only passing a pointer to the first element, 
        and that’s what sizeof measures. 



If it’s an array of char s, 
then sizeof the array is the number of elements, 
since sizeof(char) is defined to be 1. 
For anything else, 
you have to divide by the size of each element.



        Check array size without declaring it.

One more thing you can do with sizeof and arrays 
is get the size of an array of a fixed number of elements
without declaring the array. 
This is like how you can get the size of an int with sizeof(int).
For example, to see how many bytes would be needed 
for an array of 48 double s, you can do this:
sizeof(double [48]);



        You can initialize an array with constants ahead of time.

int a[5] = {22, 37, 3490, 18, 95};      // Initialize with these values.
int a[100] = {0};                       // Set an entire array to zero.



        Multidimensional arrays.

int a[10];
int b[2][7];
int c[4][5][6];



int row, col;

int a[2][5] = {
        {0, 1, 2, 3, 4},
        {5, 6, 7, 8, 9}
};

for (row = 0; row < 2; row++) {
for (col = 0; col < 5; col++) {
                printf("(%d,%d) = %d\n", row, col, a[row][col]);
        }
}

(0,0) = 0
(0,1) = 1
(0,2) = 2
(0,3) = 3
  ...



        And you can initialize with explicit indexes.

int a[3][3] = {[0][0]=1, [1][1]=1, [2][2]=1};   // Make a 3x3 identity matrix.

1 0 0                                           // Which builds a 2D array like this.
0 1 0
0 0 1



====================================================================================================
